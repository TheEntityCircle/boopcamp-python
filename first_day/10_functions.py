# Для многократного использования
# кода также используются функции

# Допустим, мы хотим посчитать 
# факториал двух чисел: 5! и 7!

# Так как алгоритм вычисления для 
# обоих чисел одинаков, то мы можем 
# записать этот алгоритм как функцию 
# от переменной n -- числа, от которого
# мы считаем факториал

# Здесь `fact` -- название функции
# `n` -- название переменной (может быть
# любым допустимым, как и название обычных
# переменных)
def fact(n):
    res = 1
    for i in range(1, n + 1):
        res *= i
    return res # значит что функция возвращает значение res

g = fact(4)
print(g)

print(fact(5))
print(fact(7))


# У функции может быть любое число аргументов:
def two_sum(a, b):
    return a + b

print(two_sum(1, 2))

# У функции не обязательно 
# должно быть возвращаемое значение
def strange_func():
    print('H1!')
    # Далее return не обязателен,
    return # эту строчку можно стереть и ничего не изменится
    
strange_func()

# Но если мы всё же попробуем 
# записать в переменную возвращаемое 
# значение, то получим специальное значение -- None
r = strange_func()
print(r)
print(r is None) # так можно проверить, что в переменной лежит None

# Функция print() тоже ничего не возвращает:
print_res = print('Testing print() return.')
print(print_res is None)

# Также бывает второй тип аргументов
# функции -- аргументы по ключевому слову.
# Для того, чтобы его задать, нужно написать
# название аргумента, знак равно `=` и 
# присваиваемое значение. На примере 
# функции print():

# `sep` задаёт разделитель между выводимыми 
# на экран строками, `end` задаёт символы,
# выводимые в конце строки
print('La1', 'La2', end='HaHa', sep=', ')
print('Next line', end='\n\n')
print('Third line')
